import http from 'http';
import fs from 'fs';
import path from 'path';
import swaggerUI from 'swagger-ui-express';
import jsYaml from 'js-yaml';
import express, { Application, Request, Response, NextFunction } from 'express';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import bodyParser from 'body-parser';
import * as OpenApiValidator from 'express-openapi-validator';
import { OpenAPIV3 } from 'openapi-types';
import logger from './logger';
import config from './config';

interface ValidationError {
  path: string;
  message: string;
  errorCode?: string;
  location?: string;
}

interface ErrorResponse {
  message: string;
  errors?: ValidationError[] | string;
}

interface CustomError extends Error {
  status?: number;
  errors?: ValidationError[] | string;
}

class ExpressServer {
  private port: number;
  private app: Application;
  private openApiPath: string;
  private schema: OpenAPIV3.Document;
  private server?: http.Server;

  constructor(port: number, openApiYaml: string) {
    this.port = port;
    this.app = express();
    this.openApiPath = openApiYaml;
    
    try {
      const yamlContent = jsYaml.load(fs.readFileSync(openApiYaml, 'utf8'));
      this.schema = yamlContent as OpenAPIV3.Document;
    } catch (e) {
      logger.error('failed to start Express Server', e instanceof Error ? e.message : String(e));
      throw e;
    }
    
    this.setupMiddleware();
  }

  private setupMiddleware(): void {
    this.app.use(cors());
    this.app.use(bodyParser.json({ limit: '14MB' }));
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: false }));
    this.app.use(cookieParser());
    
    // Simple test to see that the server is up and responding
    this.app.get('/hello', (req: Request, res: Response) => 
      res.send(`Hello World. path: ${this.openApiPath}`)
    );
    
    // Send the openapi document *AS GENERATED BY THE GENERATOR*
    this.app.get('/openapi', (req: Request, res: Response) => 
      res.sendFile((path.join(__dirname, '..', 'openapi.yaml')))
    );
    
    // View the openapi document in a visual interface. Should be able to test from this page
    this.app.use('/api-docs', swaggerUI.serve, swaggerUI.setup(this.schema));
    
    this.app.get('/login-redirect', (req: Request, res: Response) => {
      res.status(200);
      res.json(req.query);
    });
    
    this.app.get('/oauth2-redirect.html', (req: Request, res: Response) => {
      res.status(200);
      res.json(req.query);
    });
    
    this.app.use(
      OpenApiValidator.middleware({
        apiSpec: this.openApiPath,
        operationHandlers: path.join(__dirname, 'controllers'),
        fileUploader: { dest: config.FILE_UPLOAD_PATH },
      }),
    );
  }

  public launch(): void {
    // Error handling middleware
    this.app.use((err: CustomError, req: Request, res: Response, next: NextFunction) => {
      const errorResponse: ErrorResponse = {
        message: err.message || String(err),
        errors: err.errors || '',
      };
      res.status(err.status || 500).json(errorResponse);
    });

    this.server = http.createServer(this.app);
    this.server.listen(this.port);
    console.log(`Listening on port ${this.port}`);
  }

  public async close(): Promise<void> {
    if (this.server) {
      return new Promise((resolve, reject) => {
        this.server!.close((err) => {
          if (err) {
            reject(err);
          } else {
            console.log(`Server on port ${this.port} shut down`);
            resolve();
          }
        });
      });
    }
  }
}

export default ExpressServer;